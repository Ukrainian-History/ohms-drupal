<?php
// $Id$

/**
 * @file
 * A module providing an interface to the Oral History Metadata Synchronizer.
 *
 * This module provides a template for the "OHMS audio"
 * content type, as well as a hook to save the OHMS
 * XML into a file for use by the OHMS Player PHP code.
 */

/**
 * Implements hook_help().
 */
function ohms_adapter_help($path, $arg) {
  if ($path == 'admin/help#ohms_adapter') {
    return t('Oral History Metadata Synchronizer adapter module.');
  }
}

 /**
  * Implements hook_theme().
  */
function ohms_adapter_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['node__ohms_audio'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--ohms_audio',
    'path' => drupal_get_path('module', 'ohms_adapter') . '/templates',
   );
  return $theme;
}

 /**
  * Implements hook_node_presave().
  */
function ohms_adapter_node_presave($node) {
    if ($node->type == "ohms_audio") {
      $xml = field_get_items('node', $node, 'field_ohms_xml')[0]['value'];
      $stripped = strip_tags($xml);
      // watchdog('ohms_adapter_notice', substr($stripped, 0, 50));
      $node->field_ohms_xml_tagless['und'][0]['value'] = strip_tags($xml);
    }
}

/**
 * Implements hook_node_postsave().
 */
function ohms_adapter_node_postsave($node, $op) {
  global $base_url;

  if ($node->type == "ohms_audio") {
    $filename = field_get_items("node", $node, 'field_ohms_filename')[0]['value'];
    $xmlFilePath = $_SERVER['DOCUMENT_ROOT']."/sites/default/files/ohms/".$filename;
    
    if ($op != "delete") {
      $xml = field_get_items('node', $node, 'field_ohms_xml')[0]['value'];

      # hack to work around OHMS Player's inability to cope with qualified elements
      $xml = preg_replace("/<\w+:ROOT.+?>/", '<ROOT xmlns="https://www.weareavp.com/nunncenter/ohms">', $xml);
      $xml = preg_replace("/<\w+?:/", "<", $xml);
      $xml = preg_replace("/<\/\w+?:/", "</", $xml);

      # replace OHMS media URL with the actual URL of the media derived from the filename field
      if ( ($file_items = field_get_items('node', $node, 'field_ohms_audio_file')) ) {
        $media_url = file_create_url($file_items[0]["uri"]);
        $xml = preg_replace("/<media_url>.+<\/media_url>/", "<media_url>".$media_url."</media_url>", $xml);
      }

      # save Drupal alias URL into "cms_record_id" field
      $xml = str_replace("<cms_record_id/>", 
        "<cms_record_id>".$base_url."/".drupal_get_path_alias("node/".$node->nid)."</cms_record_id>", $xml);

      $xmlFileHandle = fopen($xmlFilePath, 'w');
      if ($xmlFileHandle) {
        watchdog('ohms_adapter_notice', "Writing XML to file path {$xmlFilePath}.");

        fwrite($xmlFileHandle, $xml);
        fclose($xmlFileHandle);
      } else {
        watchdog('ohms_adapter_error', "The file path {$xmlFilePath} couldn't be opened for writing.");
      }
    } else {
      if (!unlink($xmlFilePath)) {
        watchdog('ohms_adapter_error', "Failed to remove {$filename} on delete of node {$node->title}.");
      } 
    }
  }
}

function ohms_adapter_node_view_alter(&$build) {
  $node = $build['#node'];
  if ($build['#view_mode'] == 'teaser' && $node->type == "ohms_audio" && isset($build['links']['node']['#links']['node-readmore']['title']))
    $build['links']['node']['#links']['node-readmore']['title'] = t('Listen to recording');
}
